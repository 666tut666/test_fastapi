python is installed i suppose,
to install pip:
    https://pip.pypa.io/en/stable/installation/


using an ide is recommended:
    either:
        Visual Studio Code(VS code)
            https://code.visualstudio.com/download
    or:
        Pycharm
        (community version, don`t require Pro. version)
            https://www.jetbrains.com/pycharm/download

we need to activate virtual environment

I`m using pycharm so,
    In pycharm:
        file >> new project
        tesma:
            location:
                location\FASTAPItest
                    ##thats what i named it
            Python Interpreter:
                New Virtualenv environment
            Click New environment using
            New environment using ma:
                select:
                    Virtualenv
Or,
    To activate environment u can also
    type in terminal:
        source env/bin/activate


Uvicorn:
    we will run app using uvicorn,
    our main file is main.py
        so command to run uvicorn:
            uvicorn main:app --reload
                yesma,
                    main is main.py
                    --reload:
                        yeslae code change garda afai reload garcha swagger UI lai
                        yo omit garda each time after we change we need to run uvicorn(BORINGGG)

after running uvicorn
    go to:
        localhost:8000/docs
        or
        http://127.0.0.1:8000
            yo link terminal mai aaucha

    to stop the local server:
        press CTRL+C in the terminal
        click anywhere and press it

reference:
    https://www.youtube.com/watch?v=RSRZ9bmWnCc&list=PLaNsxqNgctlM0CEzKBidDbYVmNsoBK8Ss&index=1

step 1:
    main.py created
    then in terminal run:
        pip install fastapi
        pip install uvicorn
        .....
        (check requirements.txt for all dependencies to install if you get error)
        (have added here a few, but some may be missing)
    initial:
        from fastapi import Fastapi
        app = FastAPI(
            title="MyAPI",
            description=description,
            version="0.0.1",
            contact = {
                "name": "User",
                "email": "mail@email.com"
            },
            openapi_tags=tags,
            openapi_url="/api/v1/openapi.json",

        )
        yesma:

                app=FastAPI() ma::
                    doc_url="[str]" lae localhost:8000/docs lai localhost:8000/[str]
                    redoc_url="[str]" lae localhost:8000/redoc lai localhost:8000/[str]
                        #dubai ma =None halyo bhane dubai disable huncha
                    #title to change title
                    #version ofcs version
                    #contact ma email clickable hudo raicha
                    #openapi_tags lae tag har banaucha



step 2:
    .env ma postgres ko name,pw..... haliyo
        code:
            POSTGRES_USER=postgres
            POSTGRES_PASSWORD=apple123
            POSTGRES_SERVER=localhost
            POSTGRES_PORT=5432



step 3:
    config ma postgres ko info haliyo
        code:
            POSTGRES_USER = os.getenv("POSTGRES_USER")
                #os.getenv pulls pull env variable from .env
                #it loads from .env file rather than system
            POSTGRES_PASSWORD = os.getenv("POSTGRES_PASSWORD")
            POSTGRES_SERVER = os.getenv("POSTGRES_SERVER", "localhost")
            POSTGRES_PORT = os.getenv("POSTGRES_PORT", 5432)
            POSTGRES_DATABASE = os.getenv("POSTGRES_DATABASE", "mydb")
            POSTGRES_URL = f"postgresql://{POSTGRES_USER}:{POSTGRES_PASSWORD}@{POSTGRES_SERVER}:{POSTGRES_PORT}/{POSTGRES_DATABASE}"



step 4:
    database.py banayo
        code:
            engine = create_engine(SQLALCHEMY_DATABASE_URL)
                #engine banyo

            SessionLocal = sessionmaker(bind=engine)
                #session ra engine bind bhayo

            Base = declarative_base()
                #Base banau



step 5:
    models.py banayo tablename and all halnu
    yesma table related sabi kura garnae
        yesma:
            table name define ra euta column with primary key hunai parcha
            -main ma:
                database bata engine import
                models bata Base:
                    kinaki models ma table defined cha

                    The problem is if you have multiple models
                    you cannot import from each model as Base,
                    so you need to import all models first in the main
                    and then import Base from database then it will work

            -Base.metadata.create_all(bind=engine)
            base lai engine database sanga connect garako
            app run garyo tabale create garnu lai
            schema=>public=>Table ma user banyo
                as def in models`s User class
                    Column 2ta id ra email bancha
        ##to connect sqlite database instead of POSTGRESQL,, omit :
            SQLALCHEMY_DATABASE_URL = setting.DATABASE_URL
            &
            engine = create_engine(SQLALCHEMY_DATABASE_URL)
        ##Instead write
              ##SQLALCHEMY_DATABASE_URL = 'sqlite:///.db'
              ##engine = create_engine(SQLALCHEMY_DATABASE_URL,
                    connect_args = {"check_same_thread" : False})



step 6:
    #setting relationship in table
    #in models.py
    Pg admin ma gayaera Database ko tables delete garyo
    User table ma password and is_active added
    relationship call bhayo sqlalchemy.orm bata
        ani User class ma:
            items = relationship("Items", back_populates='owner')
                back_populates='owner' lae Items lai owner sanga relationship set garyo
        ani Items class ma:
            owner = relationship("User",back_populates='items')
                back_populates='User' lae Items lai items sanga relationship set garyo
        we did set relation ship btn table user and items

    running uvicorn created items and users table,, check pg admin for detail



step 7:
    #password hashing
    pip install passlib[bcrypt]
    pip install pydantic[email]

    hashing.py created

    pwd_context = CryptContext(schemes='bcrypt', deprecated="auto")
        #using hashing algorithm bcrypt
            ##can use
                ##3sha256_crypt, md5..., des_crypt...

    class hasher banayo, CryptContext bolayaera
           @staticmethod
           def get_hash_password(plain_password):
             return pwd_context.hash(plain_password)
                 --take the hashed pw

           @staticmethod
           def verify_password(plain_password, hash_password):
              return pwd_context.verify(plain_password, hash_password)
                    --verify em

    now python console
            from hashing import Hasher
            Hasher.get_hash_password("mypassword")
                yestai sth aaucha
                    '$2b$12$S7EFHBUfe9qOeI4sxds7aecaAETUCrLiIs19HOOXKTk5iEDeEvoeK'
            Hasher.verify_password("mypassword", "$2b$12$S7EFHBUfe9qOeI4sxds7aecaAETUCrLiIs19HOOXKTk5iEDeEvoeK")
                (plainpw, hash)

                returns
                    True//False(if mistake)



step 7:
    created schemas.py
        EmailStr, BaseModel pydantic bata bolayo
        UserCreate(BaseModel) class ma:
            email/pw haru define bhayo


    main.py ma:
        UserCreate lai schemas bata bolayo

        code added:
            @app.post("/users", tags=['user'])
            def create_user(user: UserCreate):
                Try and remove it
                    print(user.email)
                    print(user.password)

                        uvicorn run
                            post/user ma email and pw halanae
                            execute ma null
                            pycharm ma i/p garya usr and pw aaucha
                passed so delete

    in database.py add
        code:
            #dependency injection
            def get_db() -> Generator:
                 try:
                    db = SessionLocal()
                    ## created db object
                    yield db
                    ## return db
                 finally:
                     db.close()

    in main.py
        import User from models
        import Hasher from hashing
        import get_db from database
        import Session from sqlalchemy.orm
        import Depends from fastapi
        after:
            @app.post("/users", tags=['user'])
        add:
            code:
                def create_user(
                     user: UserCreate,
                     db:Session=Depends(get_db)
                ):
                    user = User(
                        email=user.email,
                        password=Hasher.get_hash_password(user.password)
                    )
                    db.add(user)
                    db.commit()
                    db.refresh(user)
                    return user

        now, run uvicorn

        local:8000/docs ko
            post/users ma:
                email and pw halnae
                o/p:
                    {
                      "is_active": true,
                      "id": 1,
                      "email": "mail@email.com",
                      "password": "$2b$12$QhGuew./BI./MkrRksbitOubMTygdHU6OjmNhZheC.raqgcxk9ILK"
                    }
    aba pgdamin ma
    database/testing/Schemas/public/tables/users:
        yesma new info aaucha agi halya mail/pw



step 8:
    routes milauna routers folder banayo
    __init.py__ banayo package banauna

    users.py banayo user related route ko lai
         main ma bhako sabai /users copied into
            code:
                from fastapi import APIRouter, Depends
                from sqlalchemy.orm import Session
                from schemas import UserCreate
                from database import get_db
                from hashing import Hasher
                from models import User

                router = APIRouter()

                @router.get(
                    "/users",
                    tags=['user'],
                )
                ##tags=["..."] to manage kun tag ma halnae
                def get_user():
                    return {"message": "hello user"}

                @router.post(
                    "/users",
                    tags=['user'],
                )
                def create_user(
                        user: UserCreate,
                        db: Session = Depends(get_db)
                ):
                    user = User(
                        email=user.email,
                        password=Hasher.get_hash_password(user.password)
                    )
                    db.add(user)
                    db.commit()
                    db.refresh(user)
                    return user

    aba mathi ko import main.py bata hataunae
    now,
        to reference all these
    in main.py import users from routers
        app = fastapi ko tala
            code:
                app.include_router(users.router)

    aba make items.py in router folder
        just like above
            code:
                from fastapi import APIRouter


                router = APIRouter()


                @router.get('/items', tags=["product"])
                def get_product():
                    return {"message": "product"}

    Now,
        to reference all these
    in main.py import items from routers
        app.include_router(users.router) ko tala,
            code:
                app.include_router(items.router)

    trim and clean main.py
    restart server
        try:
            get/users
            post/users
            after adding new user final check in pgadmin



step 9:
    Na chainae data user lai display na garnu ko lai
    schemas.py ma add:
        code:
            class ShowUser(BaseModel):
            email: EmailStr
            is_active: bool
                class Config:
                    ##config banayaena bhanae dictionary sth.. error aaucha
                    orm_mode=True
                    ##orm object relationship mapper
                    ##object lai dictionary banayo

        ShowUser lae aba email ra is_active matra show garcha
    aba,
    users.py ma:
        import ShowUsers from schemas
            code:
                @router.post(
                    "/users",
                    tags=['user']
                )

            yeslai make:

                @router.post(
                    "/users",
                    tags=['user'],
                    response_model=ShowUser
                )


    uvicorn...
        response:
            {
              "email": "mail3@email.com",
              "is_active": true
            }

        specially password return na garnu lai yo
        here unnecessary kura aayaena







step 10:
        tests carried out, check /notes/testing/notes_testing






step 11:
       wiped off items.py
            wiped off code
                old code:
                    from fastapi import APIRouter


                    router = APIRouter()


                    @router.get('/items', tags=["product"])
                    def get_product():
                        return {"message": "product"}


               now,
                  in main.py:
                    changed "product" into "items" in
                        code:
                            tags = [
                                {
                                    "name": "user",
                                    "description": "user routes"
                                },
                                {
                                    "name": "items",
                                        ## "product" ==> "items"
                                    "description": "order related route"
                                }
                            ]
               also,
                 in models.py
                 imported Date,
                 added a date_posted in Items class as:
                    code:
                        date_posted = Column(Date)




step 12:
    in schemas.py,
    imported date from datetime
        Added ItemCreate(BaseModel) class
            added:
                title & description as str

        Added ShowItem(BaseModel) class
            added:
                title, description as str
                date_posted as date

            also:
                added config class as:
                     class Config:
                        orm_mode=True


************************************************************
*********************       NOTE       *********************
********* Check adding new column in existing table*********
** for now went to pgadmin and added a column date_created**
************************************************************
            ###EDIT migration may help
            ###go to step 21

    in items.py added new lines of code
        New code:
            from fastapi import APIRouter, Depends
            from schemas import ItemCreate, ShowItem
            from models import Items
            from datetime import datetime
            from sqlalchemy.orm import Session
            from database import get_db

            router = APIRouter()


            @router.post(
                "/item",
                tags=["items"],
                response_model=ShowItem
            )
            def create_item(
                    item: ItemCreate,
                    db: Session = Depends(get_db)
            ):
                owner_id = 1 ###refrence
                date_posted = datetime.now().date()
                item = Items(
                    **item.dict(),
                    date_posted=date_posted,
                    owner_id=owner_id
                )
                db.add(item)
                db.commit()
                db.refresh(item)
                return item


    run uvicorn and add new item for:
        owner_id = 1
        as referenced above ###refrence
        We have given value 1 so,
            all items added for now will only be in user 1









step 13:
        tests carried out, check /notes/testing/notes_testing






step 14:
    in items.py
        imported HTTPException
            code:
                @router.get("/item/{id}", tags=["items"])
                    {id} chai thyo pk wala ho, to call by id
                def retrieve_item_by_id(id, db: Session = Depends(get_db)):
                        #get_db as we need to retrieve id from the database
                    item = db.query(Items).filter(Items.id==id).first()
                        #filter to filter whatever
                        #.first to return first item
                    if not item:    ##if item is null
                        raise HTTPException(status_code=404, detail=f"Item {id} does not exist")
                    return item

        now,
        imported List from typing
            to get all items add
                code:
                    @router.get("/item/all", tags=["items"])
                    def retrieve_all_items(db: Session=Depends(get_db)):
                        items = db.query(Items).all()
                        return items
                #don`t keep this at last for now...
                #keep it above code above
                #order of the position in function matters///

                o/p:
                    [
                      {
                        "title": "striwqng",
                        "description": "stwqwqring",
                        "owner_id": 1,
                        "id": 3,
                        "date_posted": "2022-10-31"
                      },
                      {
                        "title": "str2ing",
                        "description": "str2ing",
                        "owner_id": 1,
                        "id": 1,
                        "date_posted": "2022-10-31"
                      }.........
                    ]

        here,
            we don`t need to show
            id and owner_id
            add
                code:
                    @router.get("/item/all", tags=["items"], response_model=List[ShowItem])
                        #show item matra rakhda error aayo,
                        #so, added List
                o/p:
                    [
                      {
                        "title": "striwqng",
                        "description": "stwqwqring",
                        "date_posted": "2022-10-31"
                      },
                      {
                        "title": "str2ing",
                        "description": "str2ing",
                        "date_posted": "2022-10-31"
                      },.....
                    ]

        now,
        we need to update items by id
        so,
            code:
                @router.put("/item/update/{id}", tags=["items"])
                def update_item_by_id(
                        id:int,
                        item:ItemCreate,
                        db:Session=Depends(get_db)
                ):
                    existing_item = db.query(Items).filter(Items.id==id)
                        #it only returns query
                    if not existing_item.first():
                            #.first() to fetch details
                        return {"Message": f"Item ID {id} has no details "}
                    existing_item.update(item)

            o/p:
                error AttributeError: 'ItemCreate' object has no attribute 'items'
            #we have i/p as schema but .update(item) takes parameter as dictionary
            #here we need to use jsonable_encoder

        so,
        imported jsonable_encoder from fastapi.encoders

        now,
        update
            existing_item.update(item)
        to,
            existing_item.update(jsonable_encoder(item))

            to understand the process remove
            #existing_item.update(jsonable_encoder(item))
            and add
                code:
                    print(existing_item)
                    print(existing_item.first())
                    print(item)
                    print(jsonable_encoder(item))
                o/p:
                    WHERE items.id = %(id_1)s
                    <models.Items object at 0x000001D75DA327A0>
                    title='update1' description='updat1e trail'
                    {'title': 'update1', 'description': 'updat1e trail'}

        now,
            remove:
                print(existing_item)
                print(existing_item.first())
                print(item)
                print(jsonable_encoder(item))

        add,
            code:
                existing_item.update(jsonable_encoder(item))
                db.commit()

        uvicorn:
            o/p:
                SELECT items.id AS items_id, items.title AS items_title, items.description AS items_description,
                items.date_posted AS items_date_posted, items.owner_id AS items_owner_id

            tara /docs ma response null cha

        yesko lai

        add,
            code:
                return {"message": f"details for {id} Successfully Updated"}

            o/p:
                {
                  "message": "details for 1 Successfully Updated"
                }

        method 1:
            code:
                #using jsonable encoder
                @router.put("/item/update/{id}", tags=["items"])
                def update_item_by_id(
                        id:int,
                        item:ItemCreate,
                        db:Session=Depends(get_db)
                ):
                    existing_item = db.query(Items).filter(Items.id==id)
                        #it only returns query
                    if not existing_item.first():
                            #.first() to fetch details
                        return {"Message": f"Item ID {id} has no details "}
                    existing_item.update(jsonable_encoder(item))
                    db.commit()
                    return {"message": f"details for {id} Successfully Updated"}

        method 2:
            code:
                #using __dict__
                @router.put("/item/update1/{id}", tags=["items"])
                def update_item_by_id_using_dict(
                        id:int,
                        item:ItemCreate,
                        db:Session=Depends(get_db)
                ):
                    existing_item = db.query(Items).filter(Items.id==id)
                        #it only returns query
                    if not existing_item.first():
                            #.first() to fetch details
                        return {"Message": f"Item ID {id} has no details "}
                    existing_item.update(item.__dict__)
                    db.commit()
                    return {"message": f"details for {id} Successfully Updated"}


        now,

        deleting item by id,
            code:
                @router.delete(f"/item/delete/{id}", tags=["items"])
                def delete_item_by_id(
                        id:int,
                        db:Session=Depends(get_db)
                ):
                    existing_item = db.query(Items).filter(Items.id == id)
                        # it only returns query
                    if not existing_item.first():
                            #.first() to fetch details
                        return {"Message": f"Item ID {id} has no details "}
                    existing_item.delete()
                    db.commit()
                    return {"message": f"Item id: {id} Successfully Deleted"}







step 14:
    pip install pytest-cov
        (tests carried out, check /notes/testing/notes_testing)




step 15:
    (Login related)
    (user authentication)
    created login.py under routers
        imported OAuth2PasswordBearer from fastapi.security
        added
        code:
            from fastapi.security import OAuth2PasswordBearer


            oath2_scheme = OAuth2PasswordBearer(tokenUrl='/login/token')
                #Oath2 session created
                #tokenUrl
                    -to give route for the token
                    -Does verification of username/pw aswell


    in items.py,
        imported oath2_scheme from  routers.logi
        basically in all put and delete methods
        in def create_item , update_item_by_id, delete_item_by_id & update_item_by_id_using_dict
            added:
                token:str=Depends(oath2_scheme)
                    #to accept the token

        running uvicorn,
        localhost:8000/docs
            we can see the authorization lock now....
            running locked route shows 401(undocumented):Unauthorized error

            clicking the Authorize button,
                we can already see that username pw and all automatically created
                remember, we haven`t defined it yet
                it comes automatically with oath... library

            also,
                trying random username and pw RN,
                    we get 404: Not Found error

    now,
    in login.py,
        imported APIRouter,OAuth2PasswordRequestForm,Depends
        set router as
            code:
                router = APIRouter()
        added,
            code:
                @router.post(
                    "/login/token",
                    tags=["login"]
                )
                def retrieve_token_after_authentication(
                        form_data: OAuth2PasswordRequestForm=Depends()
                ):
                ##as form data depends on the form itself, nothing passed in Depends
                    print(form_data.username)
                    print(form_data.password)

            running uvicorn gives
                error:
                    RuntimeError: Form data requires "python-multipart" to be installed.

        pip install python-multipart
            #to accept form data

    now,
    in main.py
    import login from router
    include login router as
        code:
            app.include_router(login.router)

    run uvicorn
    in authorization:
        set,
        username as mail@email.com
        password as password
            #we set that up earlier,
            #mail1@email.com \\ password1
                ##yei format ma halya thyo

    in terminal we get:
        o/p:
            INFO:     127.0.0.1:53959 - "GET /openapi.json HTTP/1.1" 200 OK
            mail@email.com
            password
            INFO:     127.0.0.1:53334 - "POST /login/token HTTP/1.1" 200 OK



    here,
    we get this o/p bcuz we gave following code
    in login.py..
        code:
            print(form_data.username)
            print(form_data.password)
                #omit this after we get o/p



    now,
    in login.py
        import Session from sqlalchemy.orm
        import get_db from database
        Add following
            code:
                def retrieve_token_after_authentication(
                        form_data: OAuth2PasswordRequestForm = Depends(),
                        db:Session = Depends(get_db)
                ):
                    ##as form data depends on the form itself, nothing passed in form data's Depends
                    ##but db:Session Depends from database , get_db


        now,
        import User from Models
        import HTTPException, status

        add the following code under retrieve_token_after_authentication
            code:
                user = db.query(User).filter(User.email==form_data.username).first()
                    #checking if the table has provided email
                    #form_data.username bcuz, in authorization tab default is username,pw not email,pw

                if not user:
                    raise HTTPException(
                        status_code=status.HTTP_401_UNAUTHORIZED,
                        detail="Invalid Username"
                    )
                ##we have set password related code in hashing.py
                ##in models.py class User,
                    ##password Column is already defined
                #Hasher in hashing.py we have verify_passowrd
                #so calling it
                if not Hasher.verify_password(form_data.password, user.password):
                    ##in hasher.py's verify_password
                        # we have: return pwd_context.verify(plain_password, hash_password)
                        #so using similar approach

                    raise HTTPException(
                        status_code=status.HTTP_401_UNAUTHORIZED,
                        detail="Invalid Password"
                    )

        run uvicorn,
            check giving wrong username and password to check the new code
            wrong email,pw //
            right email,wrong pw must give
                error:
                    Unauthorized



step 16:
    (JWT Token)
    in items.py's create_item,
    we have hardcoded owner_id = 1
        but,
        the id has to be as per the user who ordered,
            ie: user 5 lae order garda id 5 aauna paryo
            ailae jollae garae ni hardcode lae gardda user id 1 aaucha
        token helps with this arae


    check,
        https://jwt.io/libraries
            #it has details on what package to install for which library
            #we are using HS256,
                #so we use jose

        also check,
        Debugger in
        https://jwt.io/
        how everything is
            colors as per type of encoding ma cha

            first dot ko aagadi(HEADER):
                header ma(red):
                    algorithm as HS256 ca
                    tesko type JWT:
                        value lae kun algorithm use garya chum, kun type ko,, hamilae thyo matra represent garcha


            between first and second dot(DATA:Payload):
                data ma(pink):
                    contains actual data
                    hamilae k data halchum thei aanusar aaucha

                    #IAT is issued at:
                        when token was issued



                    yesma hamro requirement anusar ko dictionary value huncha


            after second dot(Verify Signature):
                signature ma(blue)
                    token pass garda ko encoded info using secret key
                    when we enter data, it`s first encrypted
                    along that adding some secret key as well
                    here:
                        signature with secret key gets entertained



    now,
    pip install python-jose
    #we can use pyjwt but we are using jose for now???


    first we must create a token,

    in login.py,
    import jwt from jose
        add
            code:
                data = {"sub": form_data.username}
                    #data should be dictionary
                    #we are using sub now
                        ##as sub is unique key so is our username(which is email)


    now,
    download Openssl from:
        https://www.openssl.org/source/
    we need to add security key
    it's sensitive data so we define it in .env
    to get random security key
    couldn`t load pycharm so did it from windows powershell(admin)
    right click start button
    in terminal type:
        open ssl rand -hex 32

        my random security key, which i am using rn is,
            key:
                0605bc4adcb848d0fbb0407508f43269664b45305610fd9dbaaea3d83516b142



    in .env,
    add at bottom
        code:
            SECURITY_KEY=0605bc4adcb848d0fbb0407508f43269664b45305610fd9dbaaea3d83516b142


    in config.py,
    add inside Setting class below DATABASE_URL
        code:
            SECURITY_KEY = os.getenv("SECURITY_KEY")
            ALGORITHM = "HS256"

            side note:
                you can use either:
                    SECURITY_KEY = os.getenv("SECURITY_KEY")
                        #i`m using this for now
                        #or
                    SECURITY_KEY: str  = os.getenv("SECURITY_KEY")
            /side note


    again,
    in login.py,
        add code:
             jwt_token = jwt.encode(data, setting.SECURITY_KEY, algorithm=setting.ALGORITHM)
                #pulling SECURITY_KEY, ALGORITHM from config
             return {"access_token": jwt_token, "token_type": "bearer"}
                #bearer as our token holds actual data,

    now
        run uvicorn,
            go to:
            POST/login/token Retrieve Token After Authentication
            try out as:
                username: mail@email.com
                password: password
                ##other all are sent as empty value

                execute:
                    o/p:
                        {
                          "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJtYWlsQGVtYWlsLmNvbSJ9.tst82aBMnhW9h1HX_8IJMSzra-B7vOiqApMEOqa8Amw",
                          "token_type": "bearer"
                        }

            now copy access_token:
                eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJtYWlsQGVtYWlsLmNvbSJ9.tst82aBMnhW9h1HX_8IJMSzra-B7vOiqApMEOqa8Amw


            now,
            goto:
                jwt.io
                paste token in Encoded

                we get,

                HEADER:
                    {
                      "alg": "HS256",
                      "typ": "JWT"
                    }


                PAYLOAD: DATA:
                    {
                      "sub": "mail@email.com"
                    }


                VERIFY SIGNATURE:
                    HMACSHA256(
                      base64UrlEncode(header) + "." +
                      base64UrlEncode(payload),

                    [your-256-bit-secret]#TEXTFIELD

                    ) []secret base64 encoded
                        #CLICKABLE FIELD

                        click it to make signature valid


    NOW,
    in login.py
    new updated code:
                from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
                from fastapi import APIRouter, Depends, HTTPException, status
                from sqlalchemy.orm import Session
                from database import get_db
                from models import User
                from hashing import Hasher
                from jose import jwt
                from config import setting

                oath2_scheme = OAuth2PasswordBearer(tokenUrl='/login/token')
                # Oath2 session created
                # tokenUrl to give route for the token

                router = APIRouter()


                @router.post(
                    "/login/token",
                    tags=["login"]
                )
                def retrieve_token_after_authentication(
                        form_data: OAuth2PasswordRequestForm = Depends(),
                        db:Session = Depends(get_db)
                ):
                    ##as form data depends on the form itself, nothing passed in form data's Depends
                    ##but db:Session Depends from database , get_db
                    user = db.query(User).filter(User.email==form_data.username).first()
                        #checking if the table has provided email
                    if not user:
                        raise HTTPException(
                            status_code=status.HTTP_401_UNAUTHORIZED,
                            detail="Invalid Username"
                        )
                    ##we have set password related code in hashing.py
                    ##in models.py class User,
                        ##password Column is already defined
                    #Hasher in hashing.py we have verify_passowrd
                    #so calling it
                    if not Hasher.verify_password(form_data.password, user.password):
                        ##in hasher.py's verify_password
                            # we have: return pwd_context.verify(plain_password, hash_password)
                            #so using similar approach

                        raise HTTPException(
                            status_code=status.HTTP_401_UNAUTHORIZED,
                            detail="Invalid Password"
                        )
                    data = {"sub": form_data.username}
                        #data should be dictionary
                        #we are using sub now
                            ##as sub is unique key so is our username(which is email)
                    jwt_token = jwt.encode(data, setting.SECURITY_KEY, algorithm=setting.ALGORITHM)
                        #pulling SECURITY_KEY, ALGORITHM from config
                    return {"access_token": jwt_token, "token_type": "bearer"}
                        #bearer as our token holds actual data,




    in config.py,
    new updated code:
                import os
                from dotenv import load_dotenv

                load_dotenv(dotenv_path=".env")
                ##.env file load garya postgres ko setting ko lai


                class Settings:
                    TITLE="title from config"
                    VERSION = "0.0.1"
                    DESCRIPTION = "dummy project description"
                    NAME = "USER"
                    EMAIL = "mail@email.com"

                    POSTGRES_USER = os.getenv("POSTGRES_USER")
                    ##os.getenv pulls pull env variable from .env
                    ##it loads from .env file rather than system
                    POSTGRES_PASSWORD = os.getenv("POSTGRES_PASSWORD")
                    POSTGRES_SERVER = os.getenv("POSTGRES_SERVER", "localhost")
                    POSTGRES_PORT = os.getenv("POSTGRES_PORT", 5432)
                    POSTGRES_DATABASE = os.getenv("POSTGRES_DATABASE", "testing")
                    DATABASE_URL = f"postgresql://{POSTGRES_USER}:{POSTGRES_PASSWORD}@{POSTGRES_SERVER}/{POSTGRES_DATABASE}"
                    SECURITY_KEY = os.getenv("SECURITY_KEY")
                    ALGORITHM = "HS256"


                setting = Settings()



step 17:
    (Implement Authorization)
    (using JWT Token)
    in items.py,
        def:
            create_item function has hardcoded owner_id as 1
            whichever user makes the order default is always 1 due to it
            but,
            we need to properly assign id to the user who created it
            so we are going to further tweak our code.
            for that what we need to do is use the token system we implemented above
            we will use the token to specify order to it's specific user properly
        /def

    in all project rename SECURITY_KEY to SECRET_KEY
    ie (config.py, .env & login.py)
        so,
        updated code:
            import jose from jwt
            import setting from config
            import status from fastapi
            import User from models

            <below def create_item>
                add:
                    code:
                        ##using try block for now
                        try:
                            payload = jwt.decode(token, setting.SECRET_KEY, algorithms=setting.ALGORITHM)
                            username = payload.get("sub")
                            #data is dictionary,
                            #payload.get is a dictionary method to get data.
                            if username is None:
                                raise HTTPException(
                                    status_code=status.HTTP_401_UNAUTHORIZED,
                                    detail="Unable to verify"
                                )
                            user = db.query(User).filter(User.email==username).first()
                            if user is None:
                                raise HTTPException(
                                    status_code=status.HTTP_401_UNAUTHORIZED,
                                    detail="email is not in our database"
                                )
                        except Exception as e:
                            raise HTTPException(
                                status_code=status.HTTP_401_UNAUTHORIZED,
                                detail="Unable to verify"
                            )

                run uvicorn,
                    trying to post/create_item
                        error:
                            401 Unauthorized
                                {
                                  "detail": "Not authenticated"
                                }

                    now,
                    use authorize at top using,
                        email: mail3@email.com
                        password: password3
                            ##it is id 3 so using it // not using id 1

                    create an item
                        post/item Create Item
                        any item

                        o.p/
                        will come success

                    now check pgadmin for checking if it was posted by
                    user wth id 3

                problem solved

        next problem user i d1 can delete from user id 4`s order
        so,
        after def delete_by_id(..)
        add
            code:
                        try:
                            payload = jwt.decode(token, setting.SECRET_KEY, algorithms=setting.ALGORITHM)
                            username = payload.get("sub")
                            #data is dictionary,
                            #payload.get is a dictionary method to get data.
                            if username is None:
                                raise HTTPException(
                                    status_code=status.HTTP_401_UNAUTHORIZED,
                                    detail="Unable to verify"
                                )
                            user = db.query(User).filter(User.email==username).first()
                            if user is None:
                                raise HTTPException(
                                    status_code=status.HTTP_401_UNAUTHORIZED,
                                    detail="email is not in our database"
                                )
                        except Exception as e:
                            raise HTTPException(
                                status_code=status.HTTP_401_UNAUTHORIZED,
                                detail="Unable to verify"
                            )

                        existing_item = db.query(Items).filter(Items.id == id)
                            # it only returns query
                        if not existing_item.first():
                                #.first() to fetch details
                            return {"Message": f"Item ID {id} has no details "}
                        if existing_item.first().owner_id == user.id:

                            existing_item.delete()
                            db.commit()
                            return {"message": f"Item id: {id} Successfully Deleted"}
                        else:
                            return {"message": "you aren`t authorized"}

        updated update_item_by_id
            code:
                        try:
                        payload = jwt.decode(token, setting.SECRET_KEY, algorithms=setting.ALGORITHM)
                        username = payload.get("sub")
                        #data is dictionary,
                        #payload.get is a dictionary method to get data.
                        if username is None:
                            raise HTTPException(
                                status_code=status.HTTP_401_UNAUTHORIZED,
                                detail="Unable to verify"
                            )
                        user = db.query(User).filter(User.email==username).first()
                        if user is None:
                            raise HTTPException(
                                status_code=status.HTTP_401_UNAUTHORIZED,
                                detail="email is not in our database"
                            )
                    except Exception as e:
                        raise HTTPException(
                            status_code=status.HTTP_401_UNAUTHORIZED,
                            detail="unable to verify credentials"
                        )
                    existing_item = db.query(Items).filter(Items.id==id)
                        #it only returns query
                    if not existing_item.first():
                            #.first() to fetch details
                        return {"Message": f"Item ID {id} has no details "}
                    if existing_item.first().owner_id == user.id:
                        existing_item.update(jsonable_encoder(item))
                        db.commit()
                        return {"message": f"details for {id} Successfully Updated"}
                    else:
                        return {"message": "you aren`t authorized"}



step 18:
    in items.py,
        we have DRY,
        we copied above code in each function,
        so we are going to make a new function instead

            code:
                def get_user_from_token(db, token):
                    ##using try block
                    try:
                        payload = jwt.decode(token, setting.SECRET_KEY, algorithms=setting.ALGORITHM)
                        username = payload.get("sub")
                        # data is dictionary,
                        # payload.get is a dictionary method to get data.
                        if username is None:
                            raise HTTPException(
                                status_code=status.HTTP_401_UNAUTHORIZED,
                                detail="Unable to verify"
                            )
                        user = db.query(User).filter(User.email == username).first()
                        if user is None:
                            raise HTTPException(
                                status_code=status.HTTP_401_UNAUTHORIZED,
                                detail="email is not in our database"
                            )
                    except Exception as e:
                        raise HTTPException(
                            status_code=status.HTTP_401_UNAUTHORIZED,
                            detail="Unable to verify"
                        )
                    return user


        now,
            where ever we used that we will simply call the function,
            and the DRY is no more

            so,
            we delete that code and add
                code:
                    user = get_user_from_token(db, token)


        run uvicorn,
                if you get
                    error:
                        Unable to connect to server: could not connect to server: Connection refused (0x0000274D/10061) Is the server running on host "localhost" (::1) and accepting TCP/IP connections on port 5432? could not connect to server: Connection refused (0x0000274D/10061) Is the server running on host "localhost" (127.0.0.1) and accepting TCP/IP connections on port 5432?
                    remedy:
                        task manager >> services >> start/restart >> postgresql-X64


            create a *new item* from a user,
            login another user
            and try to delete *new item*
                o/p:
                    {
                      "message": "you aren`t authorized"
                    }



Step 19:
          tests carried out, check /notes/testing/notes_testing
            (step 6)




Step 20:
    (Now we do FrontEnd)
    (src=
        https://fastapi.tiangolo.com/advanced/templates/
    )
    pip install jinja2
        note:
            we have DRY problem in HTML coding
            too much repetitions
            with jinja we can:
                we create a separate html file,
                containing all  repeat codes,
                and,
                    we will inherit the html code
                    for now we do that in base.html
        /note



        made new directories
            /templates
            /webapps
            /webapps/routers


        in /templates
            created item_hp.html
                #item home page

            created base.html
                html file for inheriting


        in /webapps/routers
            created items.py

                items.py,
                    code:
                        from fastapi import APIRouter, Request
                        from fastapi.templating import Jinja2Templates


                        router = APIRouter()
                        templates = Jinja2Templates(directory="templates")
                            #defined path where html files are
                                ##templates.....


                        @router.get("/")
                        def item_home(request: Request):
                            return templates.TemplateResponse(
                                "item_hp.html",
                                {"request": request}
                            )
                                #using pydantic approach
                                ##taking i/p as request// request type
                                    #item_hp.html is item`s home page



    in base.html,
        added code:
            <!DOCTYPE html>
            <head>
                <!-- CSS only -->
                <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css" rel="stylesheet">
                {% block title %}
                {% endblock %}
            </head>

            <body>

                {% block content %}
                {% endblock %}
            <script>
                !-- JavaScript Bundle with Popper -->
                <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js"></script>
                    {% block script %}
                    {% endblock %}
            </script>
            </body>

            </html>

                note:
                    {% ..... %}
                    it is jinja template
                    loops and all lai ni yei ho syntax

                    <js ra css>
                        ko src:
                            https://getbootstrap.com/

                    omit integrity and crossorigin from below for now,
                        original one:
                            <!-- CSS only -->
                            <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi" crossorigin="anonymous">

                            <!-- JavaScript Bundle with Popper -->
                            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-OERcA2EqjJCMA+/3y+gxIOqMEjwtxJY7qPCqsdltbNJuaOe923+mo//f6V8Qbsw3" crossorigin="anonymous"></script>


    now,
        in item_hp.html:
            add code:
                {% extends "base.html" %}

                {% block title %}
                    <title> Item HomePage </title>
                {% endblock %}

                {% block content %}
                    <h3> This is Item HomePage </h3>
                {% endblock %}


    so,
    to get items.py's route
    we need to call it in main,

        so,
            in main.py
                add code:
                    from webapps.routers import items as web_items
                    app.include_router(web_items.router)


                        web_items is used
                            because:
                                we already have item called as
                                    from routers import users, items, login
                            / because


    finally
        run uvicorn,
            homepage url...
                localhost:8000

                    o/p:
                        This is Item HomePage

            in the link
                right click
                    press inspect page source
                    or,
                    view-source:http://localhost:8000/
                        o/p:

                            <!DOCTYPE html>
                            <head>
                                <!-- CSS only -->
                                <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css" rel="stylesheet">

                                <title> Item HomePage </title>

                            </head>

                            <body>


                                <h3> This is Item HomePage </h3>

                            <script>
                                <!-- JavaScript Bundle with Popper -->
                                <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js"></script>


                            </script>
                            </body>

                            </html>

            note:
                item_hp.html ko code:
                    {% extends "base.html" %}

                    {% block title %}
                        <title> Item HomePage </title>
                    {% endblock %}

                    {% block content %}
                        <h3> This is Item HomePage </h3>
                    {% endblock %}

                tara we used inheritance and thats the fun :D

            also,
                check localhost:8000/docs,
                last ma
                    GET/Item Home
                        execute it
                            response o/p:
                                <!DOCTYPE html>
                                <head>
                                    <!-- CSS only -->
                                    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css" rel="stylesheet">

                                    <title> Item HomePage </title>

                                </head>

                                <body>


                                    <h3> This is Item HomePage </h3>

                                <script>
                                    <!-- JavaScript Bundle with Popper -->
                                    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js"></script>


                                </script>
                                </body>

                                </html>

            we dont need it in swagger ui
            gotta omit it

                so,
                in /webapps/routers/items.py,

                    add in router,
                        code:
                            router = APIRouter(include_in_schema=False)
                                               ^^^^^^^^^^^^^^^^^^^^^^^
                                               yeslae tala ko routes hide garcha
                                               yesko default is True.


                                NOTE:
                                    router specifc omit garnu lai chai
                                        code:
                                            @app.get("/items/", include_in_schema=False)
                                                               ^^^^^^^^^^^^^^^^^^^^^^^^
                                                               mention like this




step 21:

    (migration using SQLAlchemy Alembic)

        extra src:
            https://towardsdatascience.com/python-database-migrations-for-beginners-getting-started-with-alembic-84e4a73a2cca

    when we alter the field {or add a new field}{maybe},
    the update won`t happen, so we need to
    Migrate the database

    pip install alembic

    in terminal,
        alembic init migrations
            it will create environment with a new folder
                /migrations with some files in it
                and
                alembic.ini

    in alembic.ini,
        we will now setup our database
            line 58:
                comment
                    #sqlalchemy.url = driver://user:pass@localhost/dbname

        below it,
            add code:
                sqlalchemy.url = postgresql://postgres:apple123@localhost:5432/testing
                    ##we gotta setup our db so that alembic can perform it's operations

    /migration ma
    check the files itself to understand more,

    in /migration:

        env.py,
            yesma metadata milaunae paila;
            it updates db either its off/online.


        script.py.mako,
            developer file used by mako
            it`s python template engine
            it`s compiled in py module
            USED to auto generate Web pages


    check,
        /pics/SQLAlchemy Alembic.png
            scripts can be made either manually or automatic.


    now,
    (can skip to step 22)
    (for creating the script automatically)


        (for manually creating the script),
            in terminal:
                alembic revision -m "Initial"
                    o/p:
                        Generating D:\work\pythonProject\fastapiTest\migrations\versions\bc69f3f595eb_initial.py ...  done

            in bc69f3f595eb_initial.py
                modify code:
                    def upgrade() -> None:
                        #here we give new data columns to upgrade
                        #op.create_table("#table_name", #column_name)
                        pass


                    def downgrade() -> None:
                        #here we can go to previous version
                        pass

                yeti nai hola *no idea*

            #delete bc69f3f595eb_initial.py
            #delete __pycache__


            for,
            full automated script generation,

                in env.py,
                    they have told us
                        code:
                            # add your model's MetaData object here
                            # for 'autogenerate' support
                            # from myapp import mymodel
                            # target_metadata = mymodel.Base.metadata
                            target_metadata = None

                    so,
                        add code:
                            from models import Base
                            target_metadata = Base.metadata
                                    #tala mathi nai 2ta line halda hunca
                                    #thei garya cha mathi import halina

                now
                in terminal
                    code:
                        alembic revision --autogenerate -m "initial"

                            o/p:
                                INFO  [alembic.runtime.migration] Context impl PostgresqlImpl.
                                INFO  [alembic.runtime.migration] Will assume transactional DDL.
                                INFO  [alembic.ddl.postgresql] Detected sequence named 'items_id_seq' as owned by integer column 'items(id)', assuming SERIAL and omitting
                                Generating D:\work\pythonProject\fastapiTest\migrations\versions\120a464e1504_initial.py ...  done

                the above o/p,
                    gives the following results,
                        ~open pg admin
                            /db
                                /testing
                                    /schemas
                                        /public
                                            /tables
                          Yo Table >>>>>>>>>>>  /alembic_version <<<<<<<<<<
                                                    /columns
                                                        version_num

                now,

                    we delete all 3 Tables
                         /tables
                            alembic_version

                         /tables
                            items

                         /tables
                            users

                so,
                    /db
                        /testing
                            /schemas
                                /public

                                    /tables == null XD






step 22
    (for creating the script automatically)


        from
        folder /migration,
            remove /__pycache__

        empty
            /migrations/versions


        now
            in terminal
                code:
                    alembic revision --autogenerate -m "initial"

                        o/p:
                            INFO  [alembic.runtime.migration] Context impl PostgresqlImpl.
                            INFO  [alembic.runtime.migration] Will assume transactional DDL.
                            INFO  [alembic.autogenerate.compare] Detected added table 'users'
                            INFO  [alembic.autogenerate.compare] Detected added index 'ix_users_email' on
                            '['email']'
                            INFO  [alembic.autogenerate.compare] Detected added index 'ix_users_id' on '['
                            id']'
                            INFO  [alembic.autogenerate.compare] Detected added table 'items'
                            INFO  [alembic.autogenerate.compare] Detected added index 'ix_items_id' on '['id']'
                            Generating D:\work\pythonProject\fastapiTest\migrations\versions\16c44f588dd6_initial.py ...  done

        now,
            open
                fastapiTest\migrations\versions\16c44f588dd6_initial.py

                    o/p:
                        """initial

                        Revision ID: 16c44f588dd6
                        Revises:
                        Create Date: 2022-11-14 12:02:06.161169

                        """
                        from alembic import op
                        import sqlalchemy as sa


                        # revision identifiers, used by Alembic.
                        revision = '16c44f588dd6'
                        down_revision = None
                        branch_labels = None
                        depends_on = None


                        def upgrade() -> None:
                            # ### commands auto generated by Alembic - please adjust! ###
                            op.create_table('users',
                            sa.Column('id', sa.Integer(), nullable=False),
                            sa.Column('email', sa.String(), nullable=False),
                            sa.Column('password', sa.String(), nullable=False),
                            sa.Column('is_active', sa.Boolean(), nullable=True),
                            sa.PrimaryKeyConstraint('id')
                            )
                            op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
                            op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
                            op.create_table('items',
                            sa.Column('id', sa.Integer(), nullable=False),
                            sa.Column('title', sa.String(), nullable=False),
                            sa.Column('description', sa.String(), nullable=True),
                            sa.Column('date_posted', sa.Date(), nullable=True),
                            sa.Column('owner_id', sa.Integer(), nullable=True),
                            sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ),
                            sa.PrimaryKeyConstraint('id'),
                            sa.UniqueConstraint('title')
                            )
                            op.create_index(op.f('ix_items_id'), 'items', ['id'], unique=False)
                            # ### end Alembic commands ###


                        def downgrade() -> None:
                            # ### commands auto generated by Alembic - please adjust! ###
                            op.drop_index(op.f('ix_items_id'), table_name='items')
                            op.drop_table('items')
                            op.drop_index(op.f('ix_users_id'), table_name='users')
                            op.drop_index(op.f('ix_users_email'), table_name='users')
                            op.drop_table('users')
                            # ### end Alembic commands ###



    So,
    The script has now been automatically generated




step 23:
    (HTML NavBar Template)
    Since,
        Navbar is default on all pages
        we,
            add it to
                base.html


    (Bootstrap)
    we are using Bootstrap now,
        src:
            https://getbootstrap.com/docs/5.1/components/navbar/

        can use any format
            we are using first for now
            copy the code

    now,
    in /templates
    create
        navbar.html
            and pase the code
                code:
                <nav class="navbar navbar-expand-lg navbar-light bg-light">
                  <div class="container-fluid">
                    <a class="navbar-brand" href="#">Navbar</a>
                    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                      <span class="navbar-toggler-icon"></span>
                    </button>
                    <div class="collapse navbar-collapse" id="navbarSupportedContent">
                      <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                        <li class="nav-item">
                          <a class="nav-link active" aria-current="page" href="#">Home</a>
                        </li>
                        <li class="nav-item">
                          <a class="nav-link" href="#">Link</a>
                        </li>
                        <li class="nav-item dropdown">
                          <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                            Dropdown
                          </a>
                          <ul class="dropdown-menu" aria-labelledby="navbarDropdown">
                            <li><a class="dropdown-item" href="#">Action</a></li>
                            <li><a class="dropdown-item" href="#">Another action</a></li>
                            <li><hr class="dropdown-divider"></li>
                            <li><a class="dropdown-item" href="#">Something else here</a></li>
                          </ul>
                        </li>
                        <li class="nav-item">
                          <a class="nav-link disabled">Disabled</a>
                        </li>
                      </ul>
                      <form class="d-flex">
                        <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search">
                        <button class="btn btn-outline-success" type="submit">Search</button>
                      </form>
                    </div>
                  </div>
                </nav>

    now,
    go to base.html,
        <body>
            add code:
                {% include 'navbar.html' %}
        {% block content %}

            #this uses jinja to fetch navbar.html by default

    uvicorn main:app --reload
        go to localhost:8000/
            o/p:
                Navbar Home Link Dropdown Disabled             [txt box]Search
                This is Item HomePage
            sth like this


    to edit
    go to
        in navbar.html,
            edit code:
                <a class="navbar-brand" href="#">Navbar</a>
                <a class="nav-link" href="/docs">Docs</a>

            copy pase Docs and make redoc aswell
                <li class="nav-item">
                  <a class="nav-link" href="/redoc">ReDoc</a>
                </li>

    refresh,
        localhost:8000/
        check:
            new edits, click Docs and ReDoc
            #this is how we do it


step 24:
    (Static Files with FastAPI)
    (loading images now)

    pip install aiofiles
    pip freeze > requirements.txt

    now
    in navbar.html,
        changed code:
            old code:
                <a class="navbar-brand" href="#">FastAPI</a>
            new code:
            (will be edited below)
                <a class="navbar-brand" href="#">
                  <img src="" alt="Logo" width="24" height="24">
                </a>

    so,
    now to let app know where will the static file be located,
        #img src

    first,
        create static folder in root directory
        /static/images
            # /images for storing all pics

    then,
    in main.py,
        import StaticFiles from fastapi.staticfiles
            under app= fast api
                add code:
                    app.mount("/static", StaticFiles(directory="static"), name="static")
                            #mount the path for img


    in /static/images,
        keep any pic as:
            logo.png

    go back to,
    navbar.html
        edit previous
            code as:
                <img src="{{ url_for('static', path='images/logo.png') }}"
                       alt="logo"
                       width="24"
                       height="24"
                >

    uvicorn app:main -reload

    check:
        localhost:8000/
            top left ma pic aaucha
        http://localhost:8000/static/images/logo.png
        must contain the logo




step 25:
    (List all the Items in HTML Template)

    in webapps/routers,
        import Depends from fastapi
        import Items from models
        import Session from sqlalchemy.orm
        import get_db from database

        updated code:
            @router.get("/")
            def item_home(
                    request: Request,
                    db:Session=Depends(get_db)
            ):
                items = db.query(Items).all()
                return templates.TemplateResponse(
                    "item_hp.html",
                    {"request": request, "items": items}
                )
                    #using pydantic approach
                    ##taking i/p as request// request type
                        #item_hp.html is item`s home page
                        ##gotta declare Request in Jinja
                    ## as we have used item_hp, gotta define it there too
        now,
        in item_hp
            updated code:
                {% block content %}
                    <h3> This is Item HomePage </h3>
                    {{ items }}
                {% endblock %}
                        NOTE: use double {{ }} to use any variable

    now,
        from swagger UI
            create a user as
                username: mail@email.com
                password: password

            add random items


        now load localhost@8000/
            o/p:
                [<models.Items object at 0x000001E9A1000B80>, <models.Items object at 0x000001E9A1001120>, <models.Items object at 0x000001E9A10004F0>]
                        ###but we want items...

    so,
    using bootstrap,
        we create card
            src:
                https://getbootstrap.com/docs/5.1/components/card/
                    code:
                        <div class="card" style="width: 18rem;">
                          <img src="..." class="card-img-top" alt="...">
                          <div class="card-body">
                            <h5 class="card-title">Card title</h5>
                            <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
                            <a href="#" class="btn btn-primary">Go somewhere</a>
                          </div>
                        </div>

            now,
                copy the first code,


    to use cards
    in /templates
        create card.html
            paste copied code
            delete img src... line
                new code:
                <div class="card" style="width: 18rem;">
                  <div class="card-body">
                    <h5 class="card-title">Card title</h5>
                    <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
                    <a href="#" class="btn btn-primary">Go somewhere</a>
                  </div>
                </div>

    finally,
    to include the card,

    in item_hp.html
        add code:
            {% block content %}
                <h3> This is Item HomePage </h3>
                {{ items }}
                {% include 'card.html' %}
            {% endblock %}

            o/p:
                check notes/ref_img/1.png

    mini problems and fixes:
        a) everything is on left side tassaeko
            soln:
                using bootstrap,
                    create container class and put the code inside it
                        code:
                             <div class="container">
                                <h3> This is Item HomePage </h3>
                                {{ items }}
                                {% include 'card.html' %}
                            </div>

                            O/P:
                                check notes/ref_img/2.png

        b)  delete [<models.Items object at 0x000001E9A1000B80>, <models.Items object at 0x000001E9A1001120>, <models.Items object at 0x000001E9A10004F0>]
            and show as item card
                soln:
                    using jinja and for loop,
                        in item_hp.html
                            edit above code
                            new code:
                                <div class="container">
                                    <h3> This is Item HomePage </h3>
                                    {% for item in items %}
                                        {% include 'card.html' %}
                                    {% endfor %}
                                </div>

                                    o/p:
                                        check notes/ref_img/3.png

        c) Card title // Some quick example text to build on the card title and make up the bulk of the card's content.
            we don`t want that we need our data from db as it is
                soln:
                    we have item as title & description,
                    so
                    in card.html,
                        edit the existing code as
                            new code:
                                <div class="card" style="width: 18rem;">
                                  <div class="card-body">
                                    <h5 class="card-title">{{ item.title }}</h5>
                                    <p class="card-text">{{ item.description }}</p>
                                    <a href="#" class="btn btn-primary">Read more</a>
                                  </div>
                                </div>
                                            NOTE: agi jastai variable bolako
                                                #read more is empty for now
                                    o/p:
                                        check notes/ref_img/4.png


                    this gives desired o/p
                    but this is not a proper method
                    so,
                    in item_hp.html
                        add code:
                            <h3> This is Item HomePage </h3>
                            {% for item in items %}
                                {% with citem = item %}
                                    {% include 'card.html' %}
                                {% endwith %}
                            {% endfor %}
                                        note: We defined variable citem as item
                    due to note:
                    in card.html,
                        rename item as citem

                            o/p:
                                same as notes/ref_img/4.png

        d) notes/ref_img/4.png shows card is not in grid
            so we used procided code from
                src:
                    https://getbootstrap.com/docs/5.1/layout/grid/

                    sytax:
                        <div class="container">
                          <div class="row">
                            <div class="col">
                              Column
                            </div>
                            <div class="col">
                              Column
                            </div>
                            <div class="col">
                              Column
                            </div>
                          </div>
                        </div>

            lets use the syntax,
                in
                item_hp.html,
                    we need to use row class before loop // after </h3>

                        new code:
                            <div class="row">
                                {% for item in items %}
                                    {% with citem = item %}
                                        {% include 'card.html' %}
                                    {% endwith %}
                                {% endfor %}
                            </div>

                                o/p:
                                    check notes/ref_img/5.png

                                    problem: no space btn cards

        e) to provide space between cards
            we use column
                in item_hp.html
                    updated code:
                            <h3> This is Item HomePage </h3>
                            <div class="row">
                                {% for item in items %}
                                    <div class="col">
                                        {% with citem = item %}
                                            {% include 'card.html' %}
                                        {% endwith %}
                                    </div>
                                {% endfor %}
                            </div>


                            o/p:
                                check notes/ref_img/6.png

        f) possible problem: long string in description causes card to elongate
            from swagger UI
            add a new item
            give a really long description

            refresh localhost:8000/
                op:
                    check notes/ref_img/7.png


                soln:
                    we use slicing technique
                    put [desired_number]

                    eg:
                        in card.html,
                            edit code:
                                <p class="card-text">{{ citem.description[:30} }}</p>
                                        NOTE: it will display 30 char only 8.png
                                            to display more we can click in read more
                                                #haven`t done it for now

                                            o/p:
                                                check notes/ref_img/8.png


        g) Read More button doesn`t redirect to any link
            so,
            we first create a new route
                /webapps/routers
                go to item.py,

                import Items from models
                    add code:
                        @router.get("/detail/{id}")
                        def item_detail(
                                request: Request,
                                id: int,
                                db: Session=Depends(get_db)
                        ):
                            item = db.query(Items).filter(Items.id==id).first()
                            return templates.TemplateResponse(
                                "item_detail.html",
                                {"request": request, "item": item}
                            )

            now,
            in /templates create
            item_detail.html


            using bootstrap,
            we will use table
                    src:
                        https://getbootstrap.com/docs/5.1/content/tables/

                    copy first table

                    add the code:
                        {% extends 'base.html' %}

                        {% block title %}
                            <title>Job Detail</title>
                        {% endblock %}

                        {% block content %}
                            <div class="container">
                                <h1>Job Detail</h1>
                                <table class="table">
                                  <tbody>
                                     <tr>
                                         <th scope="row">Title</th>
                                         <td>{{item.title}}</td>
                                    </tr>
                                    <tr>
                                        <th scope="row">Description</th>
                                        <td>{{item.description}}</td>
                                    </tr>
                                    <tr>
                                        <th scope="row">Date Posted</th>
                                        <td colspan="2">{{item.date_posted}}</td>
                                    </tr>
                                    <tr>
                                        <th scope="row">Owner</th>
                                        <td colspan="2">{{ email }}</td>
                                    </tr>
                                </tbody>
                              </table>
                            </div>
                        {% endblock %}

            now,
            /webapps/routers
                go to item.py,

                import User from models
                    add and edit
                        code as:
                                item = db.query(Items).filter(Items.id==id).first()
                                user = db.query(User).filter(User.id==item.owner_id).first()
                                return templates.TemplateResponse(
                                    "item_detail.html",
                                    {
                                        "request": request,
                                        "item": item,
                                        "user": user
                                    }
                                )
            now,
            in item_detail.html
                edit code:
                        <td colspan="2">{{ user.email }}</td>


            finally,
            to make the button redirect,
                go to card.html,
                    edit code:
                            <a href="/detail/{{ citem.id }}" class="btn btn-primary">Read more</a>


            uvicorn main:app --reload
                load localhost:8000/
                    click any string. i did long string item
                        o/p:
                            check notes/ref_img/9.png




step 26:
    (user registration)
        we don`t have a HTML route for registration,
        in,
        /webapps/routers
            create
                users.py
                        code:
                            from fastapi import APIRouter, Request
                            from fastapi.templating import Jinja2Templates

                            router = APIRouter()
                            templates = Jinja2Templates(directory="templates")


                            @router.get("/register")
                            def registration(request: Request):
                                return templates.TemplateResponse(
                                    "user_register.html",
                                    {"request": request}
                                )

        now,
        in /templates,
            create,
                user_register.html,
                we have defined it in above code so....
                we also use bootstrap here for registration form
                    src:
                        https://getbootstrap.com/docs/5.1/forms/overview/
                    copy first one

                        code:
                                {% extends 'base.html' %}
                                {% block title %}
                                    <title>
                                      SignUp
                                    </title>
                                {% endblock %}

                                {% block content %}
                                    <div class="container">
                                      <h1>
                                         Registration
                                      </h1>

                                       <form>

                                          <div class="mb-3">
                                            <label for="email" class="form-label">Email address</label>
                                            <input type="email" class="form-control" id="email" aria-describedby="emailHelp" placeholder="Enter your Email">
                                          </div>

                                          <div class="mb-3">
                                            <label for="password" class="form-label">Password</label>
                                            <input type="password" class="form-control" id="password" placeholder="Enter your Password">
                                          </div>

                                          <button type="submit" class="btn btn-primary">Register</button>
                                       </form>
                                    </div>
                                {% endblock %}

        now,
        we need to define this route in main

            in main.py,
                add code:
                        from webapps.routers import items as web_items, users as web_users
                                                                      ##^^^^^^^^^^^^^^^^^^^ new import
                        #and at last
                        app.include_router(web_users.router)


        we now have created the login form

            uvicorn main:app --reload
                localhost:8000/register
                    the email validation is done by default
                        o/p:
                             check notes/ref_img/10.png

        for now no process is done in backend to register,
        lets get to that now

        so,
        first
        in /templates/navbar.html,
            add code:
                    <li class="nav-item dropdown">
                      <a class="nav-link dropdown-toggle" href="/register" id="navbarDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                        Register
                      </a>
                      <ul class="dropdown-menu" aria-labelledby="navbarDropdown">
                        <li><a class="dropdown-item" href="/register">Register</a></li>
                        <li><a class="dropdown-item" href="/login">Login</a></li>
                        <li><hr class="dropdown-divider"></li>
                        <li><a class="dropdown-item" href="#">Something else here</a></li>
                      </ul>
                    </li>

                    ##dropdown still doesn`t work,
                        skip for now

        now,
        go to /webapps/routers
            in,
            users.py
                add code:
                        from models import User
                        from fastapi import Depends
                        from hashing import Hasher
                        from sqlalchemy.orm import Session
                        from database import get_db
                        from  sqlalchemy.exc import IntegrityError
                        @router.post("/register")
                        ##even if we have same link and function
                        ##we are using post and get
                        ##so it`s kk
                        async def registration(
                                request: Request,
                                db:Session=Depends(get_db),
                        ):
                            form = await request.form()
                            email = form.get("email")
                            password = form.get("password")
                            errors = []
                                #error is list for now
                            if len(password) < 6:
                                errors.append("password must be more than 6 characters")
                                return templates.TemplateResponse(
                                    "user_register.html",
                                    {"request": request, "errors": errors}
                                )
                                    #error aayae user_register.html reload huncha
                            user = User(email=email, password=Hasher.get_hash_password(password))
                            try:
                                db.add(user)
                                db.commit()
                                db.refresh(user)
                            except IntegrityError:
                                errors.append("Email already exists")
                                return templates.TemplateResponse(
                                    "user_register.html",
                                    {"request": request, "errors": errors}
                                )



            because we are using post method,
            gotta define it in /templates
                user_registration.html
                    edited code:
                            <form method="post">
                            <input type="email" class="form-control" name="email" aria-describedby="emailHelp" placeholder="Enter your Email">
                            <input type="password" class="form-control" name="password" placeholder="Enter your Password">


                uvicorn main:app --reload
                    go to localhost:8000/register
                        o/p:
                            new user gets added, returns webpage with null on it
                            error message isn`t flashed

        for error display,
        in /templates/user_register.html,
                    code:
                            <h1>
                                 Registration
                            </h1>
                            {% for error in errors %}
                                   {{error}}
                            {% endfor %}
                            <form method="post">

                                o/p:
                                    error display done

                                        check notes/ref_img/11.png

            to make error look appealing,
                using bootstrap,
                    src:
                        https://getbootstrap.com/docs/5.1/components/alerts/

                    copy any

                in user_registration.html,
                    add code:
                            {% for error in errors %}
                                <div class="alert alert-primary" role="alert">
                                    {{error}}
                                </div>
                            {% endfor %}

                            o/p:
                                check notes/ref_img/12.png
                                looks much better
        in
        /webapp/routers
            items.py,
                Edit code as:
                        def item_home(
                                request: Request,
                                db:Session=Depends(get_db),
                                msg:str=None
                        ):
                            items = db.query(Items).all()
                            return templates.TemplateResponse("item_hp.html", {"request": request, "items": items, "msg": msg})


        in
        /templates
            item_hp.html
                Edit code as:
                        {% if msg %}
                            <div class="alert alert-success" role="alert">
                                {{msg}}
                            </div>
                        {% endif %}

        load bhayo
        tara,
        success msg aayaena skip




step 27:
    (User login)

        in,
        webapps/routers
            create,
                auth.py
                    code:
                        from fastapi import APIRouter, Request
                        from fastapi.templating import Jinja2Templates

                        router = APIRouter(include_in_schema=False)
                                #include_in_schema=False
                                #to remove routers as default
                                #in    swagger UI
                        templates = Jinja2Templates(directory="templates")


                        @router.get("/login")
                        def login(request: Request):
                            return templates.TemplateResponse(
                                "login.html",
                                {"request":request}
                            )

        now,
        in,
        /templates
            create,
                login.html
                here we also use bootstrap Forms
                        src:
                            https://getbootstrap.com/docs/5.1/forms/overview/
                    code:
                        {% extends 'base.html' %}

                        {% block title %}
                            <title>Login Page</title>
                        {% endblock %}

                        {% block content %}
                            <div class="container">
                              <h1>Login here!</h1>
                              <form>
                                  <div class="mb-3">
                                      <label for="email" class="form-label">Email address</label>
                                      <input type="email" required class="form-control" name="email" aria-describedby="emailHelp">
                                  </div>
                                  <div class="mb-3">
                                      <label for="password" class="form-label">Password</label>
                                      <input type="password" required class="form-control" name="email">
                                  </div>
                                  <button type="submit" class="btn btn-primary">Login</button>
                              </form>
                            </div>
                        {% endblock %}

    now,
        in main.py
            import auth as  web_auth from webapps.router
            and add router
                code:
                    app.include_router(web_auth.router)

        uvicorn main:app --reload
            click register/ dropdown/ login
                    o/p:
                        check notes/ref_img/13.png

    problem,
        when trying to login,
        1)it doesn't redirect
        2)we get this url:
                http://localhost:8000/login?email=dummy%40mail.com&email=password#

    solution,
    in /templates,
        login.html,
            edit code:
                <form method="post">

    in /webapps/routers,
        auth.py,
        we have get route,
        but,
        we need post route as the template returns post route,
        also,
            we are using cookie to store pw:

                to view cookie in Brave(the browser i`m using):
                    brave://settings/siteData?search=cookies

                to be safe from JS code attackers might use to steal info,
                    we are using using HTTPonly

                cookie syntax source:
                    https://fastapi.tiangolo.com/advanced/response-cookies/

        so,
            import Depends, Response from fastapi
            import Session from sqlalchemy.orm
            import get_db from database
            import Users from models
            import Hasher from hashing
            import jwt from josh
            import setting from config
                #as config.py has ALGORITHM, SECRET_KEY defined in Settings class
                code:
                        @router.post("/login")
                        async def login(
                                request: Request,
                                response: Response,
                                db:Session=Depends(get_db)

                        ):
                            form = await request.form()
                            email = form.get("email")
                            password = form.get("password")
                            errors = []
                            if not email:
                                errors.append("please enter valid email")
                            if not password or len(password) < 5:
                                errors.append("Password must be more than 5 characters")
                            try:
                                #checking if email exists on db.
                                user = db.query(User).filter(User.email==email).first()
                                if user is None:
                                    errors.append("Email does not exist")
                                    return templates.TemplateResponse(
                                        "login.html",
                                        {"request":request, "errors":errors}
                                    )
                                    #returning login page again as
                                        #login was not successful
                                else:
                                    if Hasher.verify_password(password, user.password):
                                        #password is plain password,
                                        #user.password is hashed pw from db
                                        #after password is verified, need jwt token, so
                                        data = {"sub":email}
                                            #jwt.io remember?
                                        jwt_token = jwt.encode(
                                            data,
                                            setting.SECRET_KEY,
                                            algorithm=setting.ALGORITHM
                                        )
                                        #we aren`t using OAth2 of swagger UI authorization
                                        #we are using our own login form,
                                        #we are now using cookie to store password
                                        response.set_cookie(
                                            key="access_token",
                                            value=f"Bearer {jwt_token}",
                                            httponly=True
                                        )
                                        #value is Bearer <token>
                                        # using Http only = True - notes ma explained cha

                                    else:
                                        errors.append("Invalid Password")
                                        return templates.TemplateResponse(
                                            "login.html",
                                            {"request": request, "errors": errors}
                                        )
                            except:
                                errors.append("something`s wrong")
                                return templates.TemplateResponse(
                                    "login.html",
                                    {"request": request, "errors": errors}
                                )

        now,
        to display error,
        in /templates
            login.html,
                add code:
                        <h1>Login here!</h1>
                        {% if msg %}
                            <div class="alert alert-success" role="success">
                                {{msg}}
                            </div>
                        {% endif %}
                                ##yo success ko lai
                        {% for error in errors %}
                            <div class="alert alert-danger" role="alert">
                                {{ error }}
                            </div>
                        {% endfor %}
                                ##yo error ko lai

    we couldnt set cookie, so
    edited /webapps/router
        auth.py as
            edited new code:
                    from fastapi import APIRouter, Request, Depends, Response
                    from fastapi.templating import Jinja2Templates
                    from sqlalchemy.orm import Session
                    from database import get_db
                    from models import User
                    from hashing import Hasher
                    from jose import jwt
                    from config import setting

                    # as config.py has ALGORITHM, SECRET_KEY defined in Settings class


                    router = APIRouter(include_in_schema=False)
                    templates = Jinja2Templates(directory="templates")


                    @router.get("/login")
                    def login(request: Request):
                        return templates.TemplateResponse(
                            "login.html",
                            {"request": request}
                        )


                    @router.post("/login")
                    async def login(
                            response: Response,
                            request: Request,
                            db: Session = Depends(get_db)
                    ):
                        form = await request.form()
                        email = form.get("email")
                        password = form.get("password")
                        errors = []
                        if not email:
                            errors.append("please enter valid email")
                        if not password or len(password) < 5:
                            errors.append("Password must be more than 5 characters")

                        try:
                            # checking if email exists on db.
                            user = db.query(User).filter(User.email == email).first()
                            if user is None:
                                errors.append("Email does not exist")
                                return templates.TemplateResponse(
                                    "login.html",
                                    {"request": request, "errors": errors}
                                )
                                # returning login page again as
                                # login was not successful
                            else:
                                if Hasher.verify_password(password, user.password):
                                    # password is plain password,
                                    # user.password is hashed pw from db
                                    # after password is verified, need jwt token, so
                                    data = {"sub": email}
                                    # jwt.io remember?

                                    jwt_token = jwt.encode(
                                        data,
                                        setting.SECRET_KEY,
                                        algorithm=setting.ALGORITHM
                                    )
                                    # we aren`t using OAth2 of swagger UI authorization
                                    # we are using our own login form,
                                    # we are now using cookie to store password
                                    msg = "Login Success"
                                    response = templates.TemplateResponse(
                                        "login.html",
                                        {"request": request, "msg": msg}
                                    )
                                    response.set_cookie(
                                        key="access_token",
                                        value=f"Bearer {jwt_token}",
                                        httponly=True
                                    )
                                    return response
                                    # value is Bearer <token>
                                    # using Http only = True - notes ma explained cha

                                else:
                                    errors.append("Invalid Password")
                                    return templates.TemplateResponse(
                                        "login.html",
                                        {"request": request, "errors": errors}
                                    )
                        except:
                            errors.append("something`s wrong")
                            return templates.TemplateResponse(
                                "login.html",
                                {"request": request, "errors": errors}
                            )


    finally,
        we are able to login and cookie is done
            cookie,
                o/p:
                    check notes/ref_img/14.png



step 28:
    (create item html template)

    in /webapps/routers
        items.py,
            add code:
                    @router.get("/create-an-item")
                    def create_an_item(request: Request):
                        return templates.TemplateResponse(
                            "create_item.html",
                            {"request": request}
                        )

    now,
    in /templates
        create create_item.html,
            we are using bootstrap forms,
                src:
                    https://getbootstrap.com/docs/5.1/forms/overview/
            used first one
                also,
                edited as required

            *NOTE* we need following field as defined in models.py
                we don`t need to add:
                    id, date_posted, owner_id
                        ~ it`s created automatically
                        skip it
                we need to add:
                    title and description

        now,
            add code:
                    {% extends 'base.html' %}

                    {% block title %}
                        <title>
                            Create Item
                        </title>
                    {% endblock %}
                    {% block content %}
                        <div class="container">
                            <h1>Create an Item</h1>
                            <form method="post">
                              <div class="mb-3">
                                <label for="title" class="form-label">Item Title</label>
                                <input type="text" class="form-control" name="title" required placeholder="Enter Item Title">
                                    <!-- required is used -->
                              </div>

                              <div class="mb-3">
                                <label for="description" class="form-label">Item Description</label>
                                <textarea class="form-control" required name="description" placeholder="Enter Item Description"></textarea>
                                    <!-- we are using textarea as description needs more place -->
                                    <!-- required is used -->
                              </div>
                              <div class="form-text">Enter item's description,in details</div>
                              <button type="submit" class="btn btn-primary">Submit</button>
                            </form>
                        </div>
                    {% endblock %}

                            o/p:
                                check notes/ref_img/15.png
                                    highlighted area show drag down feature for description
                                    we can pull and resize
                                    * - we will remove it

    in /templates
        navbar.html,
            we will remove * - something else
            and disabled will be edited to create item link
                deleted:
                    <li><hr class="dropdown-divider"></li>
                    <li><a class="dropdown-item" href="#">Something else here</a></li>

        edit code:
                <li class="nav-item dropdown">
                  <a class="nav-link dropdown-toggle" href="/register" id="navbarDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                    Register
                  </a>
                  <ul class="dropdown-menu" aria-labelledby="navbarDropdown">
                    <li><a class="dropdown-item" href="/register">Register</a></li>
                    <li><a class="dropdown-item" href="/login">Login</a></li>
                  </ul>
                </li>
                <li class="nav-item dropdown">
                  <a class="nav-link dropdown-toggle" href="" id="navbarDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                    Items
                  </a>
                  <ul class="dropdown-menu" aria-labelledby="navbarDropdown">
                    <li><a class="dropdown-item" href="/create-an-item">Create an Item</a></li>
                    <li><a class="dropdown-item" href="#">Delete Item</a></li>
                  </ul>
                </li>


                        o/p:
                            check notes/ref_img/16.png
                            under Items dropdown
                                we have redirect-able Create an Item
                                and un-routed Delete item



step 29:
    (adding functionality to create an item)
    (Reading token from HTTP Only cookies)

    in /webapps/routers,
        items.py,
            add code:
                    #using post method for submit button
                    #gotta read data so async
                    @router.post("/create-an-item")
                    async def create_an_item(request: Request):
                        form = await request.form()
                        title = form.get("title")
                        description = form.get("description")
                        print(title)
                        print(description)
                            #using print for now ONLY TO CHECK if data is being passed

            run uvicorn,
            got to :
                http://localhost:8000/create-an-item

                give any dummy detail
                    o/p:
                        redirected to null
                            in terminal:
                                a
                                555
                                INFO:     127.0.0.1:55095 - "POST /create-an-item HTTP/1.1" 200 OK
                                    #we gave
                                        a as title
                                        555 as description

                job done,
                    delete both print statements now

            now,
            remaining code
                added code:
                        description = form.get("description")
                        errors = []
                            #we need to define error dictionary
                            #it`ll store errors
                        if not title or len(title) < 2:
                            errors.append("Title should be greater than two character")
                        if not description or len(description) <10:
                            errors.append("Description should be be more than ten characters")
                        #if there are errors len will not be 0
                        #in case of error we gotta display error
                        #and also reload page showing what error, SO
                        if len(errors) > 0:
                            return templates.TemplateResponse(
                                "create_item.html",
                                {
                                    "request": request,
                                    "errors": errors
                                }
                            )
                        #{....} passing context dict, request and showing error

                            Note:
                                to display error we need to define it in html page too

    in /templates
        create_item.html,

        since error is a list,
        need to use for loop,

        we are using bootstrap to display alert
            src:
                https://getbootstrap.com/docs/5.1/components/alerts/

        choose code as the color you prefer,
        we are using red hence danger
            add code:
                    {% for error in errors %}
                        <div class="alert alert-danger" role="alert">
                            {{ error }}
                            <!-- displays the error we provided in items.py -->
                        </div>
                    {% endfor %}

        now,
        uvicorn main:app --reload
            try and check:
                all error:
                    title < 2 && description < 10
                        o/p:
                            Title should be greater than two character
                            Description should be be more than ten characters

                    title > 2 && description < 10
                        o/p:
                            Description should be be more than ten characters

                    title <2 && description > 10
                        o/p:
                            Title should be greater than two character

                correct now:
                    title > 2 , description > 10
                        o/p:
                            redirect to null
                                ##we haven`t defined form validation response page
                                # so all is ok
https://youtu.be/898hk5HFrJE?t=829